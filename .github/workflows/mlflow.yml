name: CI/CD MLflow Sales Forecasting

on:
  push:
    branches:
      - main
    paths:
      - 'MLProject/'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  DATA_PATH: MLProject/Supplement-Sales-Weekly-Expanded_preprocessing.csv
  MLFLOW_EXPERIMENT_NAME: mlflow-salesforecasting
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/sales_forecasting_image

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mlflow
          pip install -r MLProject/requirements.txt

      - name: Run MLflow Project
        run: |
          mlflow run MLProject --env-manager local --entry-point main -P data_path=$(pwd)/${{ env.DATA_PATH }}

      - name: Get latest MLflow run_id
        run: |
          echo "Getting latest run ID..."
          python <<EOF
          import mlflow
          client = mlflow.tracking.MlflowClient()
          experiment = client.get_experiment_by_name("${{ env.MLFLOW_EXPERIMENT_NAME }}")
          if experiment is None:
              raise Exception("Experiment not found.")
          runs = client.search_runs(experiment_ids=[experiment.experiment_id], order_by=["start_time DESC"])
          if not runs:
              raise Exception("No runs found in the experiment.")
          run_id = runs[0].info.run_id
          print(f"Latest run ID: {run_id}")
          with open("${GITHUB_ENV}", "a") as f:
              f.write(f"RUN_ID={run_id}\n")
          EOF

      - name: Download Model Artifact from MLflow
        run: |
          mlflow artifacts download --run-id $RUN_ID --artifact-path best_model --dst-path MLProject/output

      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: MLProject/output/model.pkl

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image via MLflow
        run: |
          mlflow models build-docker \
            --model-uri "runs:/$RUN_ID/best_model" \
            --name ${{ env.DOCKER_IMAGE_NAME }}

      - name: Push Docker Image
        run: |
          docker push ${{ env.DOCKER_IMAGE_NAME }}
